"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-sizeme";
exports.ids = ["vendor-chunks/react-sizeme"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-sizeme/dist/react-sizeme.js":
/*!********************************************************!*\
  !*** ./node_modules/react-sizeme/dist/react-sizeme.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar ReactDOM = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar invariant = __webpack_require__(/*! invariant */ \"(ssr)/./node_modules/invariant/invariant.js\");\nvar throttleDebounce = __webpack_require__(/*! throttle-debounce */ \"(ssr)/./node_modules/throttle-debounce/cjs/index.js\");\nvar createResizeDetector = __webpack_require__(/*! element-resize-detector */ \"(ssr)/./node_modules/element-resize-detector/src/element-resize-detector.js\");\nvar isShallowEqual = __webpack_require__(/*! shallowequal */ \"(ssr)/./node_modules/shallowequal/index.js\");\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nvar ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);\nvar invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);\nvar createResizeDetector__default = /*#__PURE__*/_interopDefaultLegacy(createResizeDetector);\nvar isShallowEqual__default = /*#__PURE__*/_interopDefaultLegacy(isShallowEqual);\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nvar instances = {}; // Lazily require to not cause bug\n// https://github.com/ctrlplusb/react-sizeme/issues/6\n\nfunction resizeDetector() {\n  var strategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'scroll';\n\n  if (!instances[strategy]) {\n    instances[strategy] = createResizeDetector__default['default']({\n      strategy: strategy\n    });\n  }\n\n  return instances[strategy];\n}\n\nvar _excluded$1 = [\"explicitRef\", \"className\", \"style\", \"size\", \"disablePlaceholder\", \"onSize\"];\nvar errMsg = 'react-sizeme: an error occurred whilst stopping to listen to node size changes';\nvar defaultConfig = {\n  monitorWidth: true,\n  monitorHeight: false,\n  refreshRate: 16,\n  refreshMode: 'throttle',\n  noPlaceholder: false,\n  resizeDetectorStrategy: 'scroll'\n};\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n/**\n * This is a utility wrapper component that will allow our higher order\n * component to get a ref handle on our wrapped components html.\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\n */\n\n\nvar ReferenceWrapper = /*#__PURE__*/function (_Component) {\n  _inherits(ReferenceWrapper, _Component);\n\n  var _super = _createSuper(ReferenceWrapper);\n\n  function ReferenceWrapper() {\n    _classCallCheck(this, ReferenceWrapper);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ReferenceWrapper, [{\n    key: \"render\",\n    value: function render() {\n      return React.Children.only(this.props.children);\n    }\n  }]);\n\n  return ReferenceWrapper;\n}(React.Component);\n\n_defineProperty(ReferenceWrapper, \"displayName\", 'SizeMeReferenceWrapper');\n\nfunction Placeholder(_ref) {\n  var className = _ref.className,\n      style = _ref.style;\n  // Lets create the props for the temp element.\n  var phProps = {}; // We will use any provided className/style or else make the temp\n  // container take the full available space.\n\n  if (!className && !style) {\n    phProps.style = {\n      width: '100%',\n      height: '100%'\n    };\n  } else {\n    if (className) {\n      phProps.className = className;\n    }\n\n    if (style) {\n      phProps.style = style;\n    }\n  }\n\n  return /*#__PURE__*/React__default['default'].createElement(\"div\", phProps);\n}\n\nPlaceholder.displayName = 'SizeMePlaceholder';\n/**\n * As we need to maintain a ref on the root node that is rendered within our\n * SizeMe component we need to wrap our entire render in a sub component.\n * Without this, we lose the DOM ref after the placeholder is removed from\n * the render and the actual component is rendered.\n * It took me forever to figure this out, so tread extra careful on this one!\n */\n\nvar renderWrapper = function renderWrapper(WrappedComponent) {\n  function SizeMeRenderer(props) {\n    var explicitRef = props.explicitRef,\n        className = props.className,\n        style = props.style,\n        size = props.size,\n        disablePlaceholder = props.disablePlaceholder;\n        props.onSize;\n        var restProps = _objectWithoutProperties(props, _excluded$1);\n\n    var noSizeData = size == null || size.width == null && size.height == null;\n    var renderPlaceholder = noSizeData && !disablePlaceholder;\n    var renderProps = {\n      className: className,\n      style: style\n    };\n\n    if (size != null) {\n      renderProps.size = size;\n    }\n\n    var toRender = renderPlaceholder ? /*#__PURE__*/React__default['default'].createElement(Placeholder, {\n      className: className,\n      style: style\n    }) : /*#__PURE__*/React__default['default'].createElement(WrappedComponent, _extends({}, renderProps, restProps));\n    return /*#__PURE__*/React__default['default'].createElement(ReferenceWrapper, {\n      ref: explicitRef\n    }, toRender);\n  }\n\n  SizeMeRenderer.displayName = \"SizeMeRenderer(\".concat(getDisplayName(WrappedComponent), \")\");\n  return SizeMeRenderer;\n};\n/**\n * :: config -> Component -> WrappedComponent\n *\n * Higher order component that allows the wrapped component to become aware\n * of it's size, by receiving it as an object within it's props.\n *\n * @param  monitorWidth\n *   Default true, whether changes in the element's width should be monitored,\n *   causing a size property to be broadcast.\n * @param  monitorHeight\n *   Default false, whether changes in the element's height should be monitored,\n *   causing a size property to be broadcast.\n *\n * @return The wrapped component.\n */\n\n\nfunction withSize() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConfig;\n  var _config$monitorWidth = config.monitorWidth,\n      monitorWidth = _config$monitorWidth === void 0 ? defaultConfig.monitorWidth : _config$monitorWidth,\n      _config$monitorHeight = config.monitorHeight,\n      monitorHeight = _config$monitorHeight === void 0 ? defaultConfig.monitorHeight : _config$monitorHeight,\n      _config$refreshRate = config.refreshRate,\n      refreshRate = _config$refreshRate === void 0 ? defaultConfig.refreshRate : _config$refreshRate,\n      _config$refreshMode = config.refreshMode,\n      refreshMode = _config$refreshMode === void 0 ? defaultConfig.refreshMode : _config$refreshMode,\n      _config$noPlaceholder = config.noPlaceholder,\n      noPlaceholder = _config$noPlaceholder === void 0 ? defaultConfig.noPlaceholder : _config$noPlaceholder,\n      _config$resizeDetecto = config.resizeDetectorStrategy,\n      resizeDetectorStrategy = _config$resizeDetecto === void 0 ? defaultConfig.resizeDetectorStrategy : _config$resizeDetecto;\n  invariant__default['default'](monitorWidth || monitorHeight, 'You have to monitor at least one of the width or height when using \"sizeMe\"');\n  invariant__default['default'](refreshRate >= 16, \"It is highly recommended that you don't put your refreshRate lower than \" + '16 as this may cause layout thrashing.');\n  invariant__default['default'](refreshMode === 'throttle' || refreshMode === 'debounce', 'The refreshMode should have a value of \"throttle\" or \"debounce\"');\n  var refreshDelayStrategy = refreshMode === 'throttle' ? throttleDebounce.throttle : throttleDebounce.debounce;\n  return function WrapComponent(WrappedComponent) {\n    var SizeMeRenderWrapper = renderWrapper(WrappedComponent);\n\n    var SizeAwareComponent = /*#__PURE__*/function (_React$Component) {\n      _inherits(SizeAwareComponent, _React$Component);\n\n      var _super2 = _createSuper(SizeAwareComponent);\n\n      function SizeAwareComponent() {\n        var _this;\n\n        _classCallCheck(this, SizeAwareComponent);\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        _this = _super2.call.apply(_super2, [this].concat(args));\n\n        _defineProperty(_assertThisInitialized(_this), \"domEl\", null);\n\n        _defineProperty(_assertThisInitialized(_this), \"state\", {\n          width: undefined,\n          height: undefined\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"uninstall\", function () {\n          if (_this.domEl) {\n            try {\n              _this.detector.uninstall(_this.domEl);\n            } catch (err) {\n              // eslint-disable-next-line no-console\n              console.warn(errMsg);\n            }\n\n            _this.domEl = null;\n          }\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"determineStrategy\", function (props) {\n          if (props.onSize) {\n            if (!_this.callbackState) {\n              _this.callbackState = _objectSpread2({}, _this.state);\n            }\n\n            _this.strategy = 'callback';\n          } else {\n            _this.strategy = 'render';\n          }\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"strategisedSetState\", function (state) {\n          if (_this.strategy === 'callback') {\n            _this.callbackState = state;\n\n            _this.props.onSize(state);\n          }\n\n          _this.setState(state);\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"strategisedGetState\", function () {\n          return _this.strategy === 'callback' ? _this.callbackState : _this.state;\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"refCallback\", function (element) {\n          _this.element = element;\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"hasSizeChanged\", function (current, next) {\n          var c = current;\n          var n = next;\n          return monitorWidth && c.width !== n.width || monitorHeight && c.height !== n.height;\n        });\n\n        _defineProperty(_assertThisInitialized(_this), \"checkIfSizeChanged\", refreshDelayStrategy(refreshRate, function (el) {\n          var _el$getBoundingClient = el.getBoundingClientRect(),\n              width = _el$getBoundingClient.width,\n              height = _el$getBoundingClient.height;\n\n          var next = {\n            width: monitorWidth ? width : null,\n            height: monitorHeight ? height : null\n          };\n\n          if (_this.hasSizeChanged(_this.strategisedGetState(), next)) {\n            _this.strategisedSetState(next);\n          }\n        }));\n\n        return _this;\n      }\n\n      _createClass(SizeAwareComponent, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          this.detector = resizeDetector(resizeDetectorStrategy);\n          this.determineStrategy(this.props);\n          this.handleDOMNode();\n        }\n      }, {\n        key: \"componentDidUpdate\",\n        value: function componentDidUpdate() {\n          this.determineStrategy(this.props);\n          this.handleDOMNode();\n        }\n      }, {\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          // Change our size checker to a noop just in case we have some\n          // late running events.\n          this.hasSizeChanged = function () {\n            return undefined;\n          };\n\n          this.checkIfSizeChanged = function () {\n            return undefined;\n          };\n\n          this.uninstall();\n        }\n      }, {\n        key: \"handleDOMNode\",\n        value: function handleDOMNode() {\n          var found = this.element && ReactDOM__default['default'].findDOMNode(this.element);\n\n          if (!found) {\n            // If we previously had a dom node then we need to ensure that\n            // we remove any existing listeners to avoid memory leaks.\n            this.uninstall();\n            return;\n          }\n\n          if (!this.domEl) {\n            this.domEl = found;\n            this.detector.listenTo(this.domEl, this.checkIfSizeChanged);\n          } else if (this.domEl.isSameNode && !this.domEl.isSameNode(found) || this.domEl !== found) {\n            this.uninstall();\n            this.domEl = found;\n            this.detector.listenTo(this.domEl, this.checkIfSizeChanged);\n          } else ;\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var disablePlaceholder = withSize.enableSSRBehaviour || withSize.noPlaceholders || noPlaceholder || this.strategy === 'callback';\n\n          var size = _objectSpread2({}, this.state);\n\n          return /*#__PURE__*/React__default['default'].createElement(SizeMeRenderWrapper, _extends({\n            explicitRef: this.refCallback,\n            size: this.strategy === 'callback' ? null : size,\n            disablePlaceholder: disablePlaceholder\n          }, this.props));\n        }\n      }]);\n\n      return SizeAwareComponent;\n    }(React__default['default'].Component);\n\n    _defineProperty(SizeAwareComponent, \"displayName\", \"SizeMe(\".concat(getDisplayName(WrappedComponent), \")\"));\n\n    SizeAwareComponent.WrappedComponent = WrappedComponent;\n    return SizeAwareComponent;\n  };\n}\n/**\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\n * flag that should be set within the initialisation phase of your application.\n *\n * Warning: don't set this flag unless you need to as using it may cause\n * extra render cycles to happen within your components depending on the logic\n * contained within them around the usage of the `size` data.\n *\n * DEPRECATED: Please use the global noPlaceholders\n */\n\n\nwithSize.enableSSRBehaviour = false;\n/**\n * Global configuration allowing to disable placeholder rendering for all\n * sizeMe components.\n */\n\nwithSize.noPlaceholders = false;\n\nvar _excluded = [\"children\", \"render\"],\n    _excluded2 = [\"children\", \"render\"],\n    _excluded3 = [\"children\", \"render\"];\n\nvar SizeMe = /*#__PURE__*/function (_Component) {\n  _inherits(SizeMe, _Component);\n\n  var _super = _createSuper(SizeMe);\n\n  function SizeMe(props) {\n    var _this;\n\n    _classCallCheck(this, SizeMe);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"createComponent\", function (config) {\n      _this.SizeAware = withSize(config)(function (_ref) {\n        var children = _ref.children;\n        return children;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSize\", function (size) {\n      return _this.setState({\n        size: size\n      });\n    });\n\n    props.children;\n        props.render;\n        var sizeMeConfig = _objectWithoutProperties(props, _excluded);\n\n    _this.createComponent(sizeMeConfig);\n\n    _this.state = {\n      size: {\n        width: undefined,\n        height: undefined\n      }\n    };\n    return _this;\n  }\n\n  _createClass(SizeMe, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props;\n          _this$props.children;\n          _this$props.render;\n          var currentSizeMeConfig = _objectWithoutProperties(_this$props, _excluded2);\n\n      prevProps.children;\n          prevProps.render;\n          var prevSizeMeConfig = _objectWithoutProperties(prevProps, _excluded3);\n\n      if (!isShallowEqual__default['default'](currentSizeMeConfig, prevSizeMeConfig)) {\n        this.createComponent(currentSizeMeConfig);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var SizeAware = this.SizeAware;\n      var render = this.props.children || this.props.render;\n      return /*#__PURE__*/React__default['default'].createElement(SizeAware, {\n        onSize: this.onSize\n      }, render({\n        size: this.state.size\n      }));\n    }\n  }]);\n\n  return SizeMe;\n}(React.Component);\n\n_defineProperty(SizeMe, \"defaultProps\", {\n  children: undefined,\n  render: undefined\n});\n\nwithSize.SizeMe = SizeMe;\nwithSize.withSize = withSize;\n\nmodule.exports = withSize;\n//# sourceMappingURL=react-sizeme.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-sizeme/dist/react-sizeme.js\n");

/***/ })

};
;